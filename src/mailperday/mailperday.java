/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package mailperday;

import com.sun.mail.imap.IMAPFolder;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.image.BufferedImage;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.mail.*;
import javax.swing.*;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.time.Day;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;

/**
 *
 * @author Trent Jones <trentwilliamjones@gmail.com>
 * @version 1.0
 * @since 19/11/12
 */
public class mailperday extends javax.swing.JFrame
{
    private JComboBox cbFolderList = null; // Only here because it needs to be accessed outside of the method it's created in.
    private JButton button = null; // Only here because it needs to be accessed outside of the method it's created in.
    private String email = null;
    private String pass = null;
    private ProgressMonitor progMonitor;
    long endOfButtonPress;
    long startOfFolderLoop;
    
    /**
     * Creates new form mailperday
     */
    public mailperday() 
    {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lblTitle = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        tfEmail = new javax.swing.JTextField();
        tfPassword = new javax.swing.JPasswordField();
        lblEmail = new javax.swing.JLabel();
        lblPassword = new javax.swing.JLabel();
        lblError = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jButtonLogin = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblTitle.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("FizzBuzz's Email Tool");

        lblEmail.setText("Email Address:");

        lblPassword.setText("Password:");

        lblError.setForeground(new java.awt.Color(255, 0, 0));
        lblError.setText("Please make sure all fields are filled out!");
        lblError.setVisible(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblEmail)
                            .addComponent(lblPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfPassword)
                            .addComponent(tfEmail)))
                    .addComponent(lblError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEmail)
                    .addComponent(tfEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPassword)
                    .addComponent(tfPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblError)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButtonLogin.setText("Login");
        jButtonLogin.setAlignmentX(SwingConstants.CENTER);
        jButtonLogin.setHideActionText(true);
        jButtonLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoginActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(79, 79, 79)
                .addComponent(jButtonLogin)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonLogin)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Login and provide user with a list of folders to choose.
     * @param evt 
     */
    private void jButtonLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoginActionPerformed
        if (tfEmail.getText().equals("") || new String(tfPassword.getPassword()).equals(""))
        {
            lblError.setVisible(true);
            this.pack();
        }
        else
        {
            // Create new thread to run login/progess bar.
            // Otherwise won't be able to update progress bar.
            progMonitor = new ProgressMonitor(this, "Logging in...", "", 0, 100);
            progMonitor.setMillisToDecideToPopup(0); // Show immediately.
            pack();
            
            ProgTask pt = new ProgTask();
            pt.execute();
        }
    }//GEN-LAST:event_jButtonLoginActionPerformed

    class ProgTask extends SwingWorker<Void, Void>
    {
        public ProgTask()
        {
            this.addPropertyChangeListener(new PropertyChangeListener(){
                @Override
                public void propertyChange(PropertyChangeEvent evt) {
                    if ("progress".equals(evt.getPropertyName())) 
                    {
                        int value = (Integer) evt.getNewValue();
                        progMonitor.setProgress(value);
                        System.out.println("propertyChange called with: " + value);
                    }
                }
            });
            setProgress(0);
        }
        
        @Override
        public Void doInBackground() throws InterruptedException
        {
            email = tfEmail.getText();
            pass = new String(tfPassword.getPassword());
            Store store = null;
            String[] folderNames = null;

            try
            {
                Properties props = System.getProperties();
                props.setProperty("mail.store.protocol", "imaps");

                Session session = Session.getDefaultInstance(props, null);

                store = session.getStore("imaps");
                store.connect("imap.googlemail.com", email, pass);

                // Need list("*") as list() does not show folders under [GMAIL]
                // (such as All Mail, Spam, Drafts, Sent, etc.)
                Folder[] folders = store.getDefaultFolder().list("*");
                folderNames = new String[folders.length];
                int count = 0; // Used to initialise the folderNames array. Could change this to a list and use the add method.
                for (Folder f : folders)
                {
                    if ((f.getType() & Folder.HOLDS_MESSAGES) != 0)
                    {
                        //System.out.println("Folder " + count + ": " + f.getName());
                        //System.out.println("Folder " + count + ": " + f.getFullName());
                        folderNames[count] = f.getFullName();
                        count++;
                        Thread.sleep(100); // progress monitor won't update without this...
                        int value = (int)(((double)count / folders.length) * 100.0);
                        setProgress(Math.min(value, 100));
                        System.out.println("setProgress called with: " + Math.min(value, 100));
                    }
                }

                // Needed data is got, can close this now.
            } 
            catch (MessagingException ex) 
            {
                Logger.getLogger(mailperday.class.getName()).log(Level.SEVERE, null, ex);
            }
            finally
            {
                // Make sure store is closed.
                if (store != null)
                {
                    try 
                    {
                        store.close();
                    } 
                    catch (MessagingException ex) 
                    {
                        Logger.getLogger(mailperday.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }

            // Don't need login stuff any more, remove it.
            remove(jPanel1);
            remove(jPanel2);

            // Create new stuff for the panel.
            cbFolderList = new JComboBox(folderNames);
            button = new JButton("Get Daily Emails Graph");
            button.addActionListener(new java.awt.event.ActionListener() 
            {
                @Override
                public void actionPerformed(ActionEvent e) {
                    buttonActionPerformed(e);
                }
            });

            // Shitty layout, best way I can figure for now.
            // Don't want to waste too much time on aesthetics.
            // TODO: Investigate Group or Swing layout (probably Swing).
            setLayout(new BorderLayout());
            add(lblTitle, BorderLayout.NORTH);
            add(cbFolderList, BorderLayout.WEST);
            add(button, BorderLayout.EAST);

            pack();

            // Done for this method. 
            return null;
        }
        
        @Override
        public void done()
        {
            progMonitor.setProgress(100);
        }
    }
    
    /**
     * Grab emails from selected folder and graph daily count.
     * @param evt 
     */
    private void buttonActionPerformed(java.awt.event.ActionEvent evt)
    {
        String selected = (String)cbFolderList.getSelectedItem();
        //System.out.println("Selected Item: " + selected);
        
        IMAPFolder folder = null;
        Store store = null;
        Message[] messages;
        HashMap<Day, Integer> dailyEmailCount = new HashMap<>();
        Properties props = System.getProperties();
        props.setProperty("mail.store.protocol", "imaps");
        
        Session session = Session.getDefaultInstance(props, null);
        try 
        {
            store = session.getStore("imaps");
            store.connect("imap.googlemail.com", email, pass);
            folder = (IMAPFolder) store.getFolder(selected);
            if (!folder.isOpen())
            {
                folder.open(Folder.READ_ONLY);
            }
            messages = folder.getMessages();
            
            // Put each message date and emails/date in a hashmap for graphing later.
            for (int i = 0; i < messages.length; i++)
            {
                Message msg = messages[i];
                Day msgDate = new Day(msg.getSentDate());
            
                // Get date email was sent.
                int count = dailyEmailCount.containsKey(msgDate) ? dailyEmailCount.get(msgDate) + 1 : 1;
                dailyEmailCount.put(msgDate, count);
            }
        } 
        catch (NoSuchProviderException ex) 
        {
            Logger.getLogger(mailperday.class.getName()).log(Level.SEVERE, null, ex);
        } 
        catch (MessagingException ex)
        {
            Logger.getLogger(mailperday.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally
        {
            // Make sure folder is closed.
            if (folder != null && folder.isOpen())
            {
                try {
                    folder.close(true);
                } catch (MessagingException ex) {
                    Logger.getLogger(mailperday.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
            // Make sure store is closed.
            if (store != null)
            {
                try {
                    store.close();
                } catch (MessagingException ex) {
                    Logger.getLogger(mailperday.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        
        // Generate a graph and add it in below button (as user may want to check another folder later).
        // Initialise simple XY chart
        TimeSeries epd = new TimeSeries(selected);
        Iterator mapIter = dailyEmailCount.entrySet().iterator();
        while (mapIter.hasNext())
        {
            Map.Entry pairs = (Map.Entry)mapIter.next();
            epd.add(((Day)pairs.getKey()), (int)pairs.getValue());
        }
        
        // Configure dataset
        TimeSeriesCollection dataset = new TimeSeriesCollection();
        dataset.addSeries(epd);
        
        // Generate graph
        JFreeChart chart = ChartFactory.createTimeSeriesChart(
                "Emails Per Day", // Title
                "Date",                      // X-Axis label
                "Emails",                // Y-Axis label
                dataset,                     // Dataset to plot
                true,                        // Show Legend
                true,                        // Use tooltips
                false                        // Configure chart to generate URLs
                );
        
        // Turn plot points on.
        XYLineAndShapeRenderer rr = (XYLineAndShapeRenderer)chart.getXYPlot().getRenderer();
        rr.setSeriesShapesVisible(0, true);
        rr.setSeriesShape(0, new java.awt.geom.Ellipse2D.Double(-1, -1, 2, 2));
        
        // Hacky, easiest option for now... //TODO: Find alternate method.
        try 
        {
            ChartUtilities.saveChartAsJPEG(new File("E:\\Documents\\NetBeansProjects\\MailPerDay\\graphs\\chart.jpg"), chart, 500, 300);
        } 
        catch (IOException ex) 
        {
            Logger.getLogger(mailperday.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        BufferedImage img = null;
        try 
        {
            img = ImageIO.read(new File("E:\\Documents\\NetBeansProjects\\MailPerDay\\graphs\\chart.jpg"));
        } 
        catch (IOException ex) 
        {
            Logger.getLogger(mailperday.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        // Display graph on JPanel
        JLabel picLabel = new JLabel(new ImageIcon(img));
        add(picLabel, BorderLayout.SOUTH);
        
        this.pack(); // Resize to fit contents.
        this.update(this.getGraphics()); // Reload panel otherwise delete/add won't take effect.
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) 
    {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mailperday.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        int[] counts = grabData();
        

        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() 
            {
                new mailperday().setVisible(true);
            }
        });
    }
    
    /**
     * Connects to gmail and grabs data.
     */
    public static int[] grabData()
    {
        IMAPFolder folder = null;
        Store store = null;
        int[] dailyEmailCount = new int[365];
        
        return dailyEmailCount;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonLogin;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblError;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField tfEmail;
    private javax.swing.JPasswordField tfPassword;
    // End of variables declaration//GEN-END:variables
}
